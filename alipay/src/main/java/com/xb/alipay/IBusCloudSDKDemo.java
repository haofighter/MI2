package com.xb.alipay;

import android.util.Log;
import com.ibuscloud.ibuscloudposlib.IBusCloudPos;
import com.ibuscloud.ibuscloudposlib.constant.IBusCloudStdRetCodeEnum;
import com.ibuscloud.ibuscloudposlib.constant.TicketType;
import com.ibuscloud.ibuscloudposlib.domain.*;

/**
 * 公交云机具SDK代理类，用于处理机具验证二维码SDK逻辑
 *
 * @author chenx
 * @version 1.0,
 * @since JDK1.8
 */

public final class IBusCloudSDKDemo {
    // 以下参数在demo中提供样例，实际使用中，请机具厂商自行根据设置传入
    /**
     * POS编号
     */
    private static final String posid = "0571000120170001";
    /**
     * 车辆编号
     */
    private static final String busid = "1-1001";
    /**
     * 线路编号
     */
    private static final String routeid = "2156";
    /**
     * 城市编码
     */
    private static final String cityid = "330100";
    /**
     * 公司编码
     */
    private static final String companyid = "33010001";
    /**
     * 车辆编号
     */
    private static final String driverid = "057110009871";
    /**
     * 司机打卡时间（GMT）
     */
    private static final int attandanceTime = 1513641600;
    /**
     * 票价
     */
    private static final int ticketPrice = 200;
    /**
     * 折扣率
     */
    private static final int discount = 91;
    /**
     * 经度
     */
    private static final double longitude = 120.089312;
    /**
     * 纬度
     */
    private static final double latitude = 30.135178;
    /**
     * 二维码数据（这里注意，实际二维码扫码获取到的是byte[]数据，这里使用byte数组的hexdump模拟，在使用时重新转换为byte[]）
     */
    private static final String qrc = "02010073323038383030323930373237323535395ABB66B502580BB800000000000000000000000003329C984F102A1D975EC29CA0F4C2C254F85DF08D05FE4D8E543033333031303010333130303730303030303432313530341C1B01000200000000000000001234567834120000000000008842E92E46304402205EB1186850B4CCDFB835CD92E914DB276E5573A93115A0880FD493D7FC9F75E8022053854AA28DA54F8DB85B474B4182E722570E3BCC4858C015A5DFB1B7AABD39D2045AB22EFB3730350218224850BBADDA05699C2B4D6F5DDB2B61CD8C09A3140CBC650219009FDAA4EC90086C2C921BFF2704BA749D419F368A73342A75";
    /**
     * 密钥数据，从后台获取的字符串数据
     */
    private static final String key = "0AB812080112480A023331124230333037394232373639324232304133313544393541343844413246374632434343304238303732334638413635444431334233393939373036444537354635353912480A023236124230323941443036313438433831453030323543423136383535393135313342453635374136413941394245394538334232454531313032323142323633303645464312470A0130124230324142324644423041423233353036433438303132363432453141353732464334364235443842384545334239324136303243433131303939323146383442304512480A023237124230333837313833393939394436303033443930374539383834444331383932383236313834353438304332313345343830443533304530334345343630383430383712470A0131124230324541393541303936424235424539363933363335444344323233314432313045313542383830334331304646453532393342323941363732353143333630354212480A023238124230333739424531313736313530433833443235364630323044354230413430394137363135433939454243373037304632374537363239303044413736304633324612470A0132124230333838323444393241454641324231454538463334394641324333384442423044304541423035374239394646324631383939424246413146323946313136324212480A023239124230333442464434413145334533394335314243433630453632444433463830443833393241343431383135353330394535304632434444393439383546414430323612470A0133124230334234314235313735313345303345424545334442344435373539344535413046313936383845394135303637414232334236433631333636363334414635373212470A0134124230323832414242383831363835454338303832423831364338344630414637424137313436373442303237363137414139433042454135343046353042363132343512470A0135124230323735464534453731343232394231373332453243464441343430313146363731384539453232363142373441453338383643363637443233414232314542374612470A0136124230324434414244363237374334323132354543393338313146423735463032453844323943453139463137423031313841303646423634444444414438463135314412470A0137124230334338333342434436464534363446324639323344334238374334393435453746363631443638364133373942343534333036433739303030454433373738423112470A0138124230323730453639453137313943383335433330374431363035303134314530353237444435423939453032354637443541393141454142364446393544433736303612470A0139124230323330383636434237464139383030453737394538373342384539373836323935453835314346333237393035464632393031323342393146324534453444453312480A023130124230334234363946303736344232434239334641454444363034464131434543423741413333414143364532313745303641344436464138363734394135314536434312480A023131124230333635433734453642334435334432373432434237454636304441373846333933314245323841433132453235444630354334343943443034443041453039364612480A023132124230333130313039414544394230364433384146313046413137323931313945303543343635353738413341444243444642454444413732333131324532444231334312480A023133124230333443423334413444313546393131344133383638434336423643393030334638393638324138433435443842424534344244333838434330424441324331434512480A023134124230333636423845334134424245313245443131433534423438413945394237323441303743463845393846373835323242323345464439354436413245433030444412480A023135124230324537303739353830434530373141393238343436453831343238454334383733413246384338373933313136383741343636464441434431334639444432394512480A023230124230334636363737303734343234424636314139454639303636334439314439434339374130324535343632443033383646424342454437464331313145434631324112480A023136124230323339364435304242434631354134304433424244303646374437373633443345353739353132384633464231464543304339353038354343314645363336453112480A023231124230323844433145333334464136313741373131423945354135303630453239444144413033414630444236343242393236343930333232344133413932353039413212480A023137124230324330364541373036464343343946323030424145363046453546383543353139454532313632303832314233373043423831354142383439424532324139443512480A023232124230324446393545364337343931453046393041323332323037354244393733464243423244313633423932363233424245313533463635383134353833463137433912480A023233124230333939463545393234413343354238454346453646334431424539423743313736424542453638353746343238383439434238453842434443453638394438323712480A023138124230333338334636303533353535354335323737424335313633463038374337454145304437394343433836423944423936353635443941333333343034443633384312480A023234124230334341324246443543364235324430453844383236333738454632334130313833394433364336304637364543444231424343304232453535453034323531463012480A023139124230333943423537314435433133393846333430443031433338304245363736423531423742413444414345443044323238373941323734303342423346343944353912480A023330124230333939394135304536323838373846303637304442424645323046393839313945344645454242303043464544393846303836374335333133353436363933443412480A0232351242303235353744354146313641333435383135433246333839363533354137463936394141374245394630413330303338364646304436333741373839313030314230";
    /**
     * 卡类型白名单数据，从后台获取的字符串数据
     */
    private static final String cardType = "0A1E1208414E5430303030311208543033333031303012085431333330313030";
    /**
     * 商户类型(实际使用按照示例传入)
     */
    private static final String merchantType = "1";
    /**
     * 机具软件版本号，不超过15字节
     */
    private static final String version = "v1.0.0";
    /**
     * oemid，由支付宝分配
     */
    private static final String oemid = "9998112123";

    private static boolean isInited = false;

    private static String merchantId = "33030001";

    private static String fleetCode = "1";

    static {
        IBusCloudStdRetCodeEnum rc = IBusCloudPos.initIBusCloudSDK();
        if (IBusCloudStdRetCodeEnum.IBUSCLOUDSDK_SUCCESS != rc) {
            throw new RuntimeException("initIBusCloudSDK Failed!");
        }
    }

    public String play() {
        StringBuilder sb = new StringBuilder();
        IBusCloudStdRetCodeEnum rc = IBusCloudStdRetCodeEnum.IBUSCLOUDSDK_SUCCESS;

        // 初始化工作只需要做一次
        if (!isInited) {
            // 初始化POS参数
            rc = initPosParam();
            if (IBusCloudStdRetCodeEnum.IBUSCLOUDSDK_SUCCESS != rc) {
                sb.append("init pos param failed...\n");
                sb.append(rc);
                return sb.toString();
            } else {
                sb.append("init pos param success...\n");
            }

            rc = initSDKParam();
            if (IBusCloudStdRetCodeEnum.IBUSCLOUDSDK_SUCCESS != rc) {
                sb.append("init sdk param failed...\n");
                sb.append(rc);
                return sb.toString();
            } else {
                sb.append("init sdk param success...\n");
            }
            isInited = true;
        }

        // 初始化成功以后就可以验证二维码了
        rc = processTrade();
        // 注意！！！实际处理时，这里只判断是否成功，这里引入过期是因为使用了实现保存好的二维码数据，所以跑demo
        // 的时候，一定是会提示过期的！！！请务必注意！！！
        if (IBusCloudStdRetCodeEnum.IBUSCLOUDSDK_SUCCESS != rc &&
                IBusCloudStdRetCodeEnum.IBUSCLOUDSDK_QRCODE_INFO_EXPIRED != rc &&
                IBusCloudStdRetCodeEnum.IBUSCLOUDSDK_QRCODE_KEY_EXPIRED != rc) {
            sb.append("init process trade failed...\n");
            sb.append(rc);
            return sb.toString();
        } else {
            sb.append("init process trade success...\n\n");
        }

        sb.append("Congratulations!\n");
        return sb.toString();
    }

    // 初始化POS机参数
    private IBusCloudStdRetCodeEnum initPosParam() {
        PosParam posParam = new PosParam();
        posParam.setPosid(posid);
        posParam.setBusid(busid);
        posParam.setRouteid(routeid);
        posParam.setCityid(cityid);
        posParam.setCompanyid(companyid);
        posParam.setDriverid(driverid);
        posParam.setMerchantType(merchantType);
        posParam.setSwVersion(version);
        posParam.setAttendanceTime(attandanceTime);
        posParam.setOemid(oemid);
        posParam.setMerchantId(merchantId);
        posParam.setFleetCode(fleetCode);

        return IBusCloudPos.initPosParam(posParam);
    }

    //初始化SDK参数
    private IBusCloudStdRetCodeEnum initSDKParam() {
        SDKParam sdkParam = new SDKParam();
        sdkParam.setKeyInfo(key);
        sdkParam.setCardTypeInfo(cardType);

        return IBusCloudPos.initSDKParam(sdkParam);
    }

    //执行交易流程
    private IBusCloudStdRetCodeEnum processTrade() {
        // 调用交易接口
        TradeRequestInfo tradeRequestInfo = new TradeRequestInfo();
        TradeResponseInfo tradeResponseInfo = new TradeResponseInfo();
        ExtendInfo extendInfo = new ExtendInfo();
        tradeRequestInfo.setCost(ticketPrice * discount / 100);
        tradeRequestInfo.setTicketPrice(ticketPrice);
        tradeRequestInfo.setLongitude(longitude);
        tradeRequestInfo.setLatitude(latitude);
        tradeRequestInfo.setTicketType(TicketType.INTEGRATED_TICKETING);
        byte[] byteQRC = HexDump.hexStringToByteArray(qrc);
        String result = new String(byteQRC, 0, byteQRC.length);
        Log.i("支付宝二维码", "" + result + "     " + byteQRC.length);

        IBusCloudStdRetCodeEnum rc =
                IBusCloudPos.processTradeProcV1(byteQRC, tradeRequestInfo, tradeResponseInfo, extendInfo);
        byte[] message = tradeResponseInfo.getMessage();

        if (message.length > 0) {
            if (rc == IBusCloudStdRetCodeEnum.IBUSCLOUDSDK_SUCCESS) {
                int qrcodeType = tradeResponseInfo.getQrcodeType();
                if (qrcodeType == 1) {
                    // 支付宝逻辑
                } else if (qrcodeType == 2) {
                    // 定制公交逻辑
                }
            } else {

            }
            // 通用逻辑
            // 是否需要发数据，不是由返回值判断，根据返回的message长度来判断
            // send()... 这里发送网络数据
            System.out.println("返回的特征码" + rc.getReturnCode());
        }

        return rc;
    }
}
