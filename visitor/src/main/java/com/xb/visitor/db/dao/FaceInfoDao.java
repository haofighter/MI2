package com.xb.visitor.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xb.visitor.entity.FaceInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FACE_INFO".
*/
public class FaceInfoDao extends AbstractDao<FaceInfo, Long> {

    public static final String TABLENAME = "FACE_INFO";

    /**
     * Properties of entity FaceInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FaceId = new Property(0, Long.class, "faceId", true, "_id");
        public final static Property Flag = new Property(1, int.class, "flag", false, "FLAG");
        public final static Property Outime = new Property(2, String.class, "outime", false, "OUTIME");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Image = new Property(4, String.class, "image", false, "IMAGE");
        public final static Property Openid = new Property(5, String.class, "openid", false, "OPENID");
        public final static Property Intime = new Property(6, String.class, "intime", false, "INTIME");
    }


    public FaceInfoDao(DaoConfig config) {
        super(config);
    }
    
    public FaceInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FACE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: faceId
                "\"FLAG\" INTEGER NOT NULL ," + // 1: flag
                "\"OUTIME\" TEXT," + // 2: outime
                "\"NAME\" TEXT," + // 3: name
                "\"IMAGE\" TEXT," + // 4: image
                "\"OPENID\" TEXT," + // 5: openid
                "\"INTIME\" TEXT);"); // 6: intime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FACE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FaceInfo entity) {
        stmt.clearBindings();
 
        Long faceId = entity.getFaceId();
        if (faceId != null) {
            stmt.bindLong(1, faceId);
        }
        stmt.bindLong(2, entity.getFlag());
 
        String outime = entity.getOutime();
        if (outime != null) {
            stmt.bindString(3, outime);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(5, image);
        }
 
        String openid = entity.getOpenid();
        if (openid != null) {
            stmt.bindString(6, openid);
        }
 
        String intime = entity.getIntime();
        if (intime != null) {
            stmt.bindString(7, intime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FaceInfo entity) {
        stmt.clearBindings();
 
        Long faceId = entity.getFaceId();
        if (faceId != null) {
            stmt.bindLong(1, faceId);
        }
        stmt.bindLong(2, entity.getFlag());
 
        String outime = entity.getOutime();
        if (outime != null) {
            stmt.bindString(3, outime);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(5, image);
        }
 
        String openid = entity.getOpenid();
        if (openid != null) {
            stmt.bindString(6, openid);
        }
 
        String intime = entity.getIntime();
        if (intime != null) {
            stmt.bindString(7, intime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FaceInfo readEntity(Cursor cursor, int offset) {
        FaceInfo entity = new FaceInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // faceId
            cursor.getInt(offset + 1), // flag
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // outime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // image
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // openid
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // intime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FaceInfo entity, int offset) {
        entity.setFaceId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFlag(cursor.getInt(offset + 1));
        entity.setOutime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOpenid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIntime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FaceInfo entity, long rowId) {
        entity.setFaceId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FaceInfo entity) {
        if(entity != null) {
            return entity.getFaceId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FaceInfo entity) {
        return entity.getFaceId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
